name: Selenium UI Tests with Allure Report

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Run Tests on ${{ matrix.browser }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        browser: [Chrome, Brave, Firefox]
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 'true'
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 'true'
      ASPNETCORE_ENVIRONMENT: ci
      SauceDemo__LoginUsernameStandardUser: ${{ secrets.SAUCEDEMO_USERNAME_STANDARD }}
      SauceDemo__LoginUsernameLockedOutUser: ${{ secrets.SAUCEDEMO_USERNAME_LOCKEDOUT }}
      # SauceDemo__LoginUsernameProblemUser: ${{ secrets.SAUCEDEMO_USERNAME_PROBLEM }}
      # SauceDemo__LoginUsernamePerformanceGlitchUser: ${{ secrets.SAUCEDEMO_USERNAME_PERFORMANCE }}
      # SauceDemo__LoginUsernameErrorUser: ${{ secrets.SAUCEDEMO_USERNAME_ERROR }}
      # SauceDemo__LoginUsernameVisualUser: ${{ secrets.SAUCEDEMO_USERNAME_VISUAL }}
      SauceDemo__LoginPassword: ${{ secrets.SAUCEDEMO_PASSWORD }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Cache WebDriverManager drivers
        uses: actions/cache@v4
        with:
          path: ~/.wdm
          key: ${{ runner.os }}-wdm-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-wdm-

      - name: Restore dependencies
        run: dotnet restore ./SeleniumTraining.sln --locked-mode

      - name: Build project
        run: dotnet build ./SeleniumTraining.sln --configuration Release --no-restore

      - name: Configure Brave Browser Repository
        if: matrix.browser == 'Brave'
        run: |
          sudo apt update -y
          sudo apt install -y apt-transport-https curl gnupg
          sudo curl -fsSLo /usr/share/keyrings/brave-browser-archive-keyring.gpg https://brave-browser-apt-release.s3.brave.com/brave-browser-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/brave-browser-archive-keyring.gpg arch=amd64] https://brave-browser-apt-release.s3.brave.com/ stable main" | sudo tee /etc/apt/sources.list.d/brave-browser-release.list
          sudo apt update -y

      - name: Cache Brave Browser Debian Package
        if: matrix.browser == 'Brave'
        uses: actions/cache@v4
        id: cache-brave-deb
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-brave-deb-${{ hashFiles('/etc/apt/sources.list.d/brave-browser-release.list') }}
          restore-keys: |
            ${{ runner.os }}-brave-deb-

      - name: Install Brave Browser (uses apt cache)
        if: matrix.browser == 'Brave'
        run: |
          sudo apt install -y brave-browser --fix-missing
          BRAVE_PATH_FOUND=""
          if command -v brave-browser &> /dev/null; then
              BRAVE_PATH_FOUND=$(command -v brave-browser)
              echo "Found Brave via 'command -v': $BRAVE_PATH_FOUND"
          elif [ -x "/opt/brave.com/brave/brave-browser" ]; then
              BRAVE_PATH_FOUND="/opt/brave.com/brave/brave-browser"
              echo "Found Brave at /opt/brave.com/brave/brave-browser"
          elif [ -x "/usr/bin/brave-browser" ]; then
              BRAVE_PATH_FOUND="/usr/bin/brave-browser"
              echo "Found Brave at /usr/bin/brave-browser"
          else
              echo "Brave browser command not found via 'command -v' or in expected /opt or /usr/bin paths."
          fi

          if [ -z "$BRAVE_PATH_FOUND" ]; then
            echo "Critical Error: Brave Browser executable not found after installation attempt and path checks."
            echo "Contents of /usr/bin:"
            ls -lh /usr/bin | grep brave || echo "No brave in /usr/bin"
            echo "Contents of /opt:"
            ls -lh /opt | grep brave || echo "No brave in /opt"
            exit 1
          fi
          
          echo "Brave Browser successfully detected/installed at: ${BRAVE_PATH_FOUND}"
          echo "Setting BRAVE_EXECUTABLE_PATH=${BRAVE_PATH_FOUND} in GITHUB_ENV"
          echo "BRAVE_EXECUTABLE_PATH=${BRAVE_PATH_FOUND}" >> $GITHUB_ENV
          echo "Verifying Brave version from found path:"
          ${BRAVE_PATH_FOUND} --version

      - name: Run Selenium tests for ${{ matrix.browser }}
        run: |
          echo "Running tests for browser: ${{ matrix.browser }}"
          if [ "${{ matrix.browser }}" == "Brave" ]; then
            echo "Effective Brave executable path for test run (from GITHUB_ENV): $BRAVE_EXECUTABLE_PATH"
          fi
          dotnet test ./SeleniumTraining/SeleniumTraining.csproj --configuration Release --no-build --logger "nunit;LogFilePath=allure-results/nunit-log-${{ matrix.browser }}.xml" --filter "TestCategory=${{ matrix.browser }}"

      - name: 'Debug: List Test Project Output Directory for Allure Results'
        if: always()
        run: |
          ls -R ./SeleniumTraining/bin/Release/net9.0/allure-results || echo "Path ./SeleniumTraining/bin/Release/net9.0/allure-results not found or empty."

      - name: Upload Allure test results (includes NUnit logs) for ${{ matrix.browser }}
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ matrix.browser }}
          path: ./SeleniumTraining/bin/Release/net9.0/allure-results
          retention-days: 7

  generate-allure-report:
    name: Generate Allure Report
    runs-on: ubuntu-latest
    needs: test
    if: always()
    steps:
      - name: Download all Allure results artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./allure-results-downloaded

      - name: 'Debug: List downloaded artifacts structure'
        run: |
          ls -R ./allure-results-downloaded

      - name: Aggregate Allure results
        run: |
          mkdir -p allure-results-final
          for artifact_dir_name in ./allure-results-downloaded/allure-results-*; do
            if [ -d "$artifact_dir_name" ]; then
              rsync -avt "$artifact_dir_name/" allure-results-final/
            else
              echo "Warning: Expected artifact directory $artifact_dir_name not found or is not a directory."
            fi
          done
          ls -R allure-results-final
          if [ -z "$(ls -A allure-results-final)" ]; then
            echo "Warning: allure-results-final is empty after aggregation. This may lead to an empty report."
          fi

      - name: Allure Report Generation
        uses: allure-framework/allure-action@v2.15.1
        id: allure_report_generation
        with:
          results_path: allure-results-final
          report_path: allure-report
          report_name: SeleniumUITestsReport

      - name: Upload Allure HTML report artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-report-html
          path: allure-report
          retention-days: 30

  deploy-allure-report-to-gh-pages:
    name: Deploy Allure Report to GitHub Pages
    runs-on: ubuntu-latest
    needs: generate-allure-report
    if: success() && github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ github.server_url }}/${{ github.repository }}/
    permissions:
      contents: write
      pages: write
    steps:
      - name: Download Allure HTML report artifact
        uses: actions/download-artifact@v4
        with:
          name: allure-report-html
          path: ./report-to-deploy

      - name: 'Debug: List downloaded report structure for deployment'
        run: |
          ls -R ./report-to-deploy

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./report-to-deploy
