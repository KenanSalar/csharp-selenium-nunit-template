name: Selenium UI Tests with Allure Report

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Run Tests on ${{ matrix.browser }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        browser: [Chrome, Firefox]
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 'true'
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 'true'
      ASPNETCORE_ENVIRONMENT: ci
      SauceDemo__LoginUsernameStandardUser: ${{ secrets.SAUCEDEMO_USERNAME_STANDARD }}
      SauceDemo__LoginUsernameLockedOutUser: ${{ secrets.SAUCEDEMO_USERNAME_LOCKEDOUT }}
      SauceDemo__LoginPassword: ${{ secrets.SAUCEDEMO_PASSWORD }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Cache WebDriverManager drivers
        uses: actions/cache@v4
        with:
          path: ~/.wdm
          key: ${{ runner.os }}-wdm-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-wdm-

      - name: Restore dependencies
        run: dotnet restore ./SeleniumTraining.sln --locked-mode

      - name: Build project
        run: dotnet build ./SeleniumTraining.sln --configuration Release --no-restore

      - name: Create allure-results directory
        run: mkdir -p ./SeleniumTraining/bin/Release/net9.0/allure-results

      - name: Run Selenium tests for ${{ matrix.browser }}
        env:
          TARGET_BROWSER_CI: ${{ matrix.browser }}
        run: |
          echo "Running tests for browser: ${{ matrix.browser }} with TARGET_BROWSER_CI=$TARGET_BROWSER_CI"
          dotnet test ./SeleniumTraining/SeleniumTraining.csproj --configuration Release --no-build --logger "nunit;LogFilePath=allure-results/nunit-log-${{ matrix.browser }}.xml" --filter "TestCategory=UI"

      - name: 'Debug: List Allure Results Output Directory Contents'
        if: always()
        run: |
          echo "Listing contents of ./SeleniumTraining/bin/Release/net9.0/allure-results/ for browser ${{ matrix.browser }}"
          ls -R ./SeleniumTraining/bin/Release/net9.0/allure-results/
          echo "Looking for JSON files specifically:"
          find ./SeleniumTraining/bin/Release/net9.0/allure-results/ -name "*-result.json" -o -name "*-container.json" || echo "No Allure JSON result files found."

      - name: Upload Allure test results for ${{ matrix.browser }}
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ matrix.browser }}
          path: ./SeleniumTraining/bin/Release/net9.0/allure-results
          if-no-files-found: warn
          retention-days: 7

  generate-allure-report:
    name: Generate Allure Report
    runs-on: ubuntu-latest
    needs: test
    if: always()
    steps:
      - name: Download all Allure results artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./allure-results-downloaded

      - name: 'Debug: List downloaded artifacts structure'
        run: |
          echo "Structure of downloaded allure artifacts:"
          ls -R ./allure-results-downloaded || echo "No artifacts downloaded or directory empty."
          echo "Looking for allure-results-* directories:"
          find ./allure-results-downloaded -name "allure-results-*" -type d || echo "No allure-results-* directories found in download."


      - name: Aggregate Allure results
        run: |
          mkdir -p allure-results-final
          echo "Looking for directories matching ./allure-results-downloaded/allure-results-* pattern"
          find ./allure-results-downloaded -maxdepth 1 -type d -name "allure-results-*" -print0 | while IFS= read -r -d $'\0' artifact_dir; do
            echo "Processing artifact directory: $artifact_dir"
            # Check if the directory contains any files before attempting to copy
            if [ -n "$(ls -A "$artifact_dir" 2>/dev/null)" ]; then
              echo "Copying files from $artifact_dir to allure-results-final/"
              # Using rsync to preserve structure and handle subdirectories if Allure results are nested
              rsync -av "$artifact_dir/" allure-results-final/
            else
              echo "Artifact directory $artifact_dir is empty."
            fi
          done

          echo "=== Final allure results after aggregation ==="
          ls -laR allure-results-final/
          if [ -z "$(ls -A allure-results-final)" ]; then
            echo "WARNING: No allure results found after aggregation! Report will be empty or based on dummy data."
            # Creating dummy results so the next step doesn't fail if absolutely no results are present
            echo '{"uuid":"dummy-uuid","testCaseId":"dummy-testCaseId","fullName":"Dummy Test","labels":[{"name":"suite","value":"Dummy Suite"}],"status":"passed","start":1609459200000,"stop":1609459201000}' > allure-results-final/dummy-result.json
            echo "environment.properties" > allure-results-final/environment.properties
          fi

      - name: Allure Report Generation
        uses: simple-elf/allure-report-action@v1.7
        id: allure_report_generation
        with:
          allure_results: allure-results-final
          allure_report: allure-report
          allure_history: allure-history

      - name: Upload Allure HTML report artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-report-html
          path: allure-report
          retention-days: 30

  deploy-allure-report-to-gh-pages:
    name: Deploy Allure Report to GitHub Pages
    runs-on: ubuntu-latest
    needs: generate-allure-report
    if: success() && github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ github.server_url }}/${{ github.repository }}/
    permissions:
      contents: write
      pages: write
    steps:
      - name: Download Allure HTML report artifact
        uses: actions/download-artifact@v4
        with:
          name: allure-report-html
          path: ./report-to-deploy

      - name: 'Debug: List downloaded report structure for deployment'
        run: |
          ls -R ./report-to-deploy

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./report-to-deploy
