namespace SeleniumTraining.Core.Services.Contracts;

/// <summary>
/// Defines the contract for a service that manages and provides standardized directory paths
/// for test execution artifacts, such as logs, screenshots, and test outputs.
/// </summary>
/// <remarks>
/// This service centralizes directory path logic, ensuring consistency across the framework.
/// Implementations are responsible for determining and creating necessary directories.
/// It helps in organizing test results and artifacts in a structured manner,
/// especially useful for CI/CD environments and local debugging.
/// </remarks>
public interface IDirectoryManagerService
{
    /// <summary>
    /// Gets the root directory where the test assembly (the currently executing .dll or .exe) is located.
    /// </summary>
    /// <remarks>
    /// This path is typically the 'bin/Debug/netX.Y' or 'bin/Release/netX.Y' folder of your test project.
    /// It serves as a base for resolving other output directories.
    /// </remarks>
    /// <value>The absolute path to the test assembly's root directory.</value>
    public string TestAssemblyRootDirectory { get; }

    /// <summary>
    /// Gets the base directory for all test output generated during a test run (e.g., "TestOutput").
    /// This directory is typically located within the <see cref="TestAssemblyRootDirectory"/>.
    /// </summary>
    /// <value>The absolute path to the base test output directory.</value>
    public string BaseTestOutputDirectory { get; }

    /// <summary>
    /// Gets the root directory where all screenshots (general failure, visual test actuals/diffs) will be stored.
    /// This directory is typically a subdirectory of <see cref="BaseTestOutputDirectory"/>.
    /// </summary>
    /// <value>The absolute path to the base screenshot directory.</value>
    public string BaseScreenshotDirectoryRoot { get; }

    /// <summary>
    /// Gets the root directory where all log files generated by the test run will be stored.
    /// This directory is typically a subdirectory of <see cref="BaseTestOutputDirectory"/>.
    /// </summary>
    /// <value>The absolute path to the base log directory.</value>
    public string BaseLogDirectoryRoot { get; }

    /// <summary>
    /// Gets the root directory of the .NET project (e.g., where the .csproj file is located).
    /// This is useful for accessing project-level resources or storing artifacts like visual baselines
    /// that need to be version-controlled.
    /// </summary>
    /// <value>The absolute path to the project's root directory.</value>
    public string ProjectRootDirectory { get; }

    /// <summary>
    /// Ensures that all base directories defined by this service (e.g., BaseTestOutputDirectory,
    /// BaseScreenshotDirectoryRoot, BaseLogDirectoryRoot) exist on the file system.
    /// If they do not exist, this method should create them.
    /// </summary>
    /// <remarks>
    /// This method is typically called once at the beginning of a test run or service initialization
    /// to prepare the directory structure.
    /// </remarks>
    /// <exception cref="IOException">Thrown if directory creation fails due to I/O errors.</exception>
    /// <exception cref="UnauthorizedAccessException">Thrown if the application lacks permissions to create the directories.</exception>
    public void EnsureBaseDirectoriesExist();

    /// <summary>
    /// Gets the full path to a directory specifically for a given test's screenshots (or a test class's screenshots)
    /// and ensures that this directory exists.
    /// The directory is typically created under <see cref="BaseScreenshotDirectoryRoot"/>.
    /// </summary>
    /// <param name="testSpecificFolderName">
    /// The name of the folder to be created or retrieved, usually derived from the test class name
    /// or a specific test method name, to organize screenshots.
    /// </param>
    /// <returns>The absolute path to the test-specific screenshot directory.</returns>
    /// <exception cref="ArgumentNullException">Thrown if <paramref name="testSpecificFolderName"/> is null or empty.</exception>
    /// <exception cref="IOException">Thrown if directory creation fails due to I/O errors.</exception>
    /// <exception cref="UnauthorizedAccessException">Thrown if the application lacks permissions to create the directory.</exception>
    public string GetAndEnsureTestScreenshotDirectory(string testSpecificFolderName);
}
